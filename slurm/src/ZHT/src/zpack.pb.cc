// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zpack.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "zpack.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ZPack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ZPack_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_zpack_2eproto() {
  protobuf_AddDesc_zpack_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "zpack.proto");
  GOOGLE_CHECK(file != NULL);
  ZPack_descriptor_ = file->message_type(0);
  static const int ZPack_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZPack, opcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZPack, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZPack, val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZPack, newval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZPack, lease_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZPack, valnull_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZPack, newvalnull_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZPack, replicanum_),
  };
  ZPack_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ZPack_descriptor_,
      ZPack::default_instance_,
      ZPack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZPack, _has_bits_[0]),
      -1,
      -1,
      sizeof(ZPack),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZPack, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_zpack_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ZPack_descriptor_, &ZPack::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_zpack_2eproto() {
  delete ZPack::default_instance_;
  delete ZPack_reflection_;
}

void protobuf_AddDesc_zpack_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013zpack.proto\"\211\001\n\005ZPack\022\016\n\006opcode\030\001 \001(\014\022"
    "\013\n\003key\030\002 \001(\014\022\013\n\003val\030\003 \001(\014\022\016\n\006newval\030\004 \001("
    "\014\022\r\n\005lease\030\005 \001(\014\022\017\n\007valnull\030\006 \001(\010\022\022\n\nnew"
    "valnull\030\007 \001(\010\022\022\n\nreplicanum\030\010 \001(\005", 153);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "zpack.proto", &protobuf_RegisterTypes);
  ZPack::default_instance_ = new ZPack();
  ZPack::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_zpack_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_zpack_2eproto {
  StaticDescriptorInitializer_zpack_2eproto() {
    protobuf_AddDesc_zpack_2eproto();
  }
} static_descriptor_initializer_zpack_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int ZPack::kOpcodeFieldNumber;
const int ZPack::kKeyFieldNumber;
const int ZPack::kValFieldNumber;
const int ZPack::kNewvalFieldNumber;
const int ZPack::kLeaseFieldNumber;
const int ZPack::kValnullFieldNumber;
const int ZPack::kNewvalnullFieldNumber;
const int ZPack::kReplicanumFieldNumber;
#endif  // !_MSC_VER

ZPack::ZPack()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ZPack)
}

void ZPack::InitAsDefaultInstance() {
}

ZPack::ZPack(const ZPack& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ZPack)
}

void ZPack::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  opcode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  val_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  newval_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lease_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  valnull_ = false;
  newvalnull_ = false;
  replicanum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ZPack::~ZPack() {
  // @@protoc_insertion_point(destructor:ZPack)
  SharedDtor();
}

void ZPack::SharedDtor() {
  opcode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  val_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  newval_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lease_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ZPack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ZPack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZPack_descriptor_;
}

const ZPack& ZPack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zpack_2eproto();
  return *default_instance_;
}

ZPack* ZPack::default_instance_ = NULL;

ZPack* ZPack::New(::google::protobuf::Arena* arena) const {
  ZPack* n = new ZPack;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ZPack::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ZPack*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(valnull_, replicanum_);
    if (has_opcode()) {
      opcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_key()) {
      key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_val()) {
      val_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_newval()) {
      newval_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_lease()) {
      lease_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ZPack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ZPack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes opcode = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_opcode()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // optional bytes key = 2;
      case 2: {
        if (tag == 18) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_val;
        break;
      }

      // optional bytes val = 3;
      case 3: {
        if (tag == 26) {
         parse_val:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_val()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_newval;
        break;
      }

      // optional bytes newval = 4;
      case 4: {
        if (tag == 34) {
         parse_newval:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_newval()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_lease;
        break;
      }

      // optional bytes lease = 5;
      case 5: {
        if (tag == 42) {
         parse_lease:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_lease()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_valnull;
        break;
      }

      // optional bool valnull = 6;
      case 6: {
        if (tag == 48) {
         parse_valnull:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &valnull_)));
          set_has_valnull();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_newvalnull;
        break;
      }

      // optional bool newvalnull = 7;
      case 7: {
        if (tag == 56) {
         parse_newvalnull:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &newvalnull_)));
          set_has_newvalnull();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_replicanum;
        break;
      }

      // optional int32 replicanum = 8;
      case 8: {
        if (tag == 64) {
         parse_replicanum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &replicanum_)));
          set_has_replicanum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ZPack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ZPack)
  return false;
#undef DO_
}

void ZPack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ZPack)
  // optional bytes opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->opcode(), output);
  }

  // optional bytes key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->key(), output);
  }

  // optional bytes val = 3;
  if (has_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->val(), output);
  }

  // optional bytes newval = 4;
  if (has_newval()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->newval(), output);
  }

  // optional bytes lease = 5;
  if (has_lease()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->lease(), output);
  }

  // optional bool valnull = 6;
  if (has_valnull()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->valnull(), output);
  }

  // optional bool newvalnull = 7;
  if (has_newvalnull()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->newvalnull(), output);
  }

  // optional int32 replicanum = 8;
  if (has_replicanum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->replicanum(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ZPack)
}

::google::protobuf::uint8* ZPack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ZPack)
  // optional bytes opcode = 1;
  if (has_opcode()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->opcode(), target);
  }

  // optional bytes key = 2;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->key(), target);
  }

  // optional bytes val = 3;
  if (has_val()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->val(), target);
  }

  // optional bytes newval = 4;
  if (has_newval()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->newval(), target);
  }

  // optional bytes lease = 5;
  if (has_lease()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->lease(), target);
  }

  // optional bool valnull = 6;
  if (has_valnull()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->valnull(), target);
  }

  // optional bool newvalnull = 7;
  if (has_newvalnull()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->newvalnull(), target);
  }

  // optional int32 replicanum = 8;
  if (has_replicanum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->replicanum(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ZPack)
  return target;
}

int ZPack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255) {
    // optional bytes opcode = 1;
    if (has_opcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->opcode());
    }

    // optional bytes key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // optional bytes val = 3;
    if (has_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->val());
    }

    // optional bytes newval = 4;
    if (has_newval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->newval());
    }

    // optional bytes lease = 5;
    if (has_lease()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->lease());
    }

    // optional bool valnull = 6;
    if (has_valnull()) {
      total_size += 1 + 1;
    }

    // optional bool newvalnull = 7;
    if (has_newvalnull()) {
      total_size += 1 + 1;
    }

    // optional int32 replicanum = 8;
    if (has_replicanum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->replicanum());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ZPack::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ZPack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ZPack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ZPack::MergeFrom(const ZPack& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_has_opcode();
      opcode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.opcode_);
    }
    if (from.has_key()) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (from.has_val()) {
      set_has_val();
      val_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.val_);
    }
    if (from.has_newval()) {
      set_has_newval();
      newval_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.newval_);
    }
    if (from.has_lease()) {
      set_has_lease();
      lease_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lease_);
    }
    if (from.has_valnull()) {
      set_valnull(from.valnull());
    }
    if (from.has_newvalnull()) {
      set_newvalnull(from.newvalnull());
    }
    if (from.has_replicanum()) {
      set_replicanum(from.replicanum());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ZPack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZPack::CopyFrom(const ZPack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZPack::IsInitialized() const {

  return true;
}

void ZPack::Swap(ZPack* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ZPack::InternalSwap(ZPack* other) {
  opcode_.Swap(&other->opcode_);
  key_.Swap(&other->key_);
  val_.Swap(&other->val_);
  newval_.Swap(&other->newval_);
  lease_.Swap(&other->lease_);
  std::swap(valnull_, other->valnull_);
  std::swap(newvalnull_, other->newvalnull_);
  std::swap(replicanum_, other->replicanum_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ZPack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ZPack_descriptor_;
  metadata.reflection = ZPack_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
